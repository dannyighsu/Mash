// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/mashservice.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "protos/Mashservice.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - MashserviceRoot

@implementation MashserviceRoot

@end

static GPBFileDescriptor *MashserviceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"mash.mashservice"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - RegisterRequest

@implementation RegisterRequest

@dynamic hasHandle, handle;
@dynamic hasEmail, email;
@dynamic hasPasswordHash, passwordHash;
@dynamic hasName, name;
@dynamic hasRegisterAgent, registerAgent;
@dynamic hasProfilePicLink, profilePicLink;
@dynamic hasBannerPicLink, bannerPicLink;

typedef struct RegisterRequest_Storage {
  uint32_t _has_storage_[1];
  int32_t registerAgent;
  NSString *handle;
  NSString *email;
  NSString *passwordHash;
  NSString *name;
  NSString *profilePicLink;
  NSString *bannerPicLink;
} RegisterRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "handle",
        .number = RegisterRequest_FieldNumber_Handle,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RegisterRequest_Storage, handle),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = RegisterRequest_FieldNumber_Email,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RegisterRequest_Storage, email),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "passwordHash",
        .number = RegisterRequest_FieldNumber_PasswordHash,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RegisterRequest_Storage, passwordHash),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = RegisterRequest_FieldNumber_Name,
        .hasIndex = 3,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RegisterRequest_Storage, name),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "registerAgent",
        .number = RegisterRequest_FieldNumber_RegisterAgent,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(RegisterRequest_Storage, registerAgent),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "profilePicLink",
        .number = RegisterRequest_FieldNumber_ProfilePicLink,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(RegisterRequest_Storage, profilePicLink),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bannerPicLink",
        .number = RegisterRequest_FieldNumber_BannerPicLink,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(RegisterRequest_Storage, bannerPicLink),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[RegisterRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(RegisterRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - RegisterResponse

@implementation RegisterResponse

@dynamic hasSuccess, success;
@dynamic hasLoginToken, loginToken;

typedef struct RegisterResponse_Storage {
  uint32_t _has_storage_[1];
  BOOL success;
  NSString *loginToken;
} RegisterResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = RegisterResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeBool,
        .offset = offsetof(RegisterResponse_Storage, success),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "loginToken",
        .number = RegisterResponse_FieldNumber_LoginToken,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RegisterResponse_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[RegisterResponse class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(RegisterResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - SignInRequest

@implementation SignInRequest

@dynamic hasHandle, handle;
@dynamic hasPasswordHash, passwordHash;

typedef struct SignInRequest_Storage {
  uint32_t _has_storage_[1];
  NSString *handle;
  NSString *passwordHash;
} SignInRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "handle",
        .number = SignInRequest_FieldNumber_Handle,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(SignInRequest_Storage, handle),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "passwordHash",
        .number = SignInRequest_FieldNumber_PasswordHash,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(SignInRequest_Storage, passwordHash),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[SignInRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(SignInRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - SignInResponse

@implementation SignInResponse

@dynamic hasUserid, userid;
@dynamic hasEmail, email;
@dynamic hasName, name;
@dynamic hasRegisterAgent, registerAgent;
@dynamic hasProfilePicLink, profilePicLink;
@dynamic hasBannerPicLink, bannerPicLink;
@dynamic hasDescription_p, description_p;
@dynamic hasLoginToken, loginToken;
@dynamic hasFollowersCount, followersCount;
@dynamic hasFollowingCount, followingCount;
@dynamic hasTrackCount, trackCount;

typedef struct SignInResponse_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  uint32_t registerAgent;
  uint32_t followersCount;
  uint32_t followingCount;
  uint32_t trackCount;
  NSString *email;
  NSString *name;
  NSString *profilePicLink;
  NSString *bannerPicLink;
  NSString *description_p;
  NSString *loginToken;
} SignInResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = SignInResponse_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(SignInResponse_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = SignInResponse_FieldNumber_Email,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(SignInResponse_Storage, email),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = SignInResponse_FieldNumber_Name,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(SignInResponse_Storage, name),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "registerAgent",
        .number = SignInResponse_FieldNumber_RegisterAgent,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(SignInResponse_Storage, registerAgent),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "profilePicLink",
        .number = SignInResponse_FieldNumber_ProfilePicLink,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(SignInResponse_Storage, profilePicLink),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bannerPicLink",
        .number = SignInResponse_FieldNumber_BannerPicLink,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(SignInResponse_Storage, bannerPicLink),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "description_p",
        .number = SignInResponse_FieldNumber_Description_p,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(SignInResponse_Storage, description_p),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "loginToken",
        .number = SignInResponse_FieldNumber_LoginToken,
        .hasIndex = 7,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(SignInResponse_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "followersCount",
        .number = SignInResponse_FieldNumber_FollowersCount,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(SignInResponse_Storage, followersCount),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "followingCount",
        .number = SignInResponse_FieldNumber_FollowingCount,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(SignInResponse_Storage, followingCount),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "trackCount",
        .number = SignInResponse_FieldNumber_TrackCount,
        .hasIndex = 10,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(SignInResponse_Storage, trackCount),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[SignInResponse class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(SignInResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - UserGetRequest

@implementation UserGetRequest

@dynamic hasLoginToken, loginToken;
@dynamic hasUserid, userid;
@dynamic hasQueryHandle, queryHandle;
@dynamic hasQueryUserid, queryUserid;

typedef struct UserGetRequest_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  uint32_t queryUserid;
  NSString *loginToken;
  NSString *queryHandle;
} UserGetRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .number = UserGetRequest_FieldNumber_LoginToken,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(UserGetRequest_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = UserGetRequest_FieldNumber_Userid,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserGetRequest_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "queryHandle",
        .number = UserGetRequest_FieldNumber_QueryHandle,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(UserGetRequest_Storage, queryHandle),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "queryUserid",
        .number = UserGetRequest_FieldNumber_QueryUserid,
        .hasIndex = 3,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserGetRequest_Storage, queryUserid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[UserGetRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(UserGetRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - UserGetResponse

@implementation UserGetResponse

@dynamic hasEmail, email;
@dynamic hasName, name;
@dynamic hasProfilePicLink, profilePicLink;
@dynamic hasBannerPicLink, bannerPicLink;
@dynamic hasDescription_p, description_p;
@dynamic hasFollowersCount, followersCount;
@dynamic hasFollowingCount, followingCount;
@dynamic hasTrackCount, trackCount;
@dynamic hasFollow, follow;

typedef struct UserGetResponse_Storage {
  uint32_t _has_storage_[1];
  BOOL follow;
  uint32_t followersCount;
  uint32_t followingCount;
  uint32_t trackCount;
  NSString *email;
  NSString *name;
  NSString *profilePicLink;
  NSString *bannerPicLink;
  NSString *description_p;
} UserGetResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .number = UserGetResponse_FieldNumber_Email,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(UserGetResponse_Storage, email),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = UserGetResponse_FieldNumber_Name,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(UserGetResponse_Storage, name),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "profilePicLink",
        .number = UserGetResponse_FieldNumber_ProfilePicLink,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(UserGetResponse_Storage, profilePicLink),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bannerPicLink",
        .number = UserGetResponse_FieldNumber_BannerPicLink,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(UserGetResponse_Storage, bannerPicLink),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "description_p",
        .number = UserGetResponse_FieldNumber_Description_p,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(UserGetResponse_Storage, description_p),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "followersCount",
        .number = UserGetResponse_FieldNumber_FollowersCount,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserGetResponse_Storage, followersCount),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "followingCount",
        .number = UserGetResponse_FieldNumber_FollowingCount,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserGetResponse_Storage, followingCount),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "trackCount",
        .number = UserGetResponse_FieldNumber_TrackCount,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserGetResponse_Storage, trackCount),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "follow",
        .number = UserGetResponse_FieldNumber_Follow,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .type = GPBTypeBool,
        .offset = offsetof(UserGetResponse_Storage, follow),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[UserGetResponse class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(UserGetResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - RecordingInfoRequest

@implementation RecordingInfoRequest

@dynamic hasLoginToken, loginToken;
@dynamic hasUserid, userid;
@dynamic hasRecid, recid;

typedef struct RecordingInfoRequest_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  uint32_t recid;
  NSString *loginToken;
} RecordingInfoRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .number = RecordingInfoRequest_FieldNumber_LoginToken,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RecordingInfoRequest_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = RecordingInfoRequest_FieldNumber_Userid,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingInfoRequest_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "recid",
        .number = RecordingInfoRequest_FieldNumber_Recid,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingInfoRequest_Storage, recid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[RecordingInfoRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(RecordingInfoRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - RecordingGetResponse

@implementation RecordingGetResponse

@dynamic hasTitle, title;
@dynamic hasBpm, bpm;
@dynamic hasBar, bar;
@dynamic hasKey, key;
@dynamic instrumentArray;
@dynamic familyArray;
@dynamic genreArray;
@dynamic subgenreArray;
@dynamic hasFeel, feel;
@dynamic hasSolo, solo;
@dynamic hasUploaded, uploaded;
@dynamic hasFormat, format;
@dynamic hasPlayCount, playCount;
@dynamic hasLikeCount, likeCount;

typedef struct RecordingGetResponse_Storage {
  uint32_t _has_storage_[1];
  BOOL solo;
  uint32_t bpm;
  uint32_t bar;
  uint32_t feel;
  uint32_t playCount;
  uint32_t likeCount;
  NSString *title;
  NSString *key;
  NSMutableArray *instrumentArray;
  NSMutableArray *familyArray;
  NSMutableArray *genreArray;
  NSMutableArray *subgenreArray;
  NSString *uploaded;
  NSString *format;
} RecordingGetResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .number = RecordingGetResponse_FieldNumber_Title,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RecordingGetResponse_Storage, title),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bpm",
        .number = RecordingGetResponse_FieldNumber_Bpm,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingGetResponse_Storage, bpm),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bar",
        .number = RecordingGetResponse_FieldNumber_Bar,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingGetResponse_Storage, bar),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "key",
        .number = RecordingGetResponse_FieldNumber_Key,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(RecordingGetResponse_Storage, key),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "instrumentArray",
        .number = RecordingGetResponse_FieldNumber_InstrumentArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingGetResponse_Storage, instrumentArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "familyArray",
        .number = RecordingGetResponse_FieldNumber_FamilyArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingGetResponse_Storage, familyArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "genreArray",
        .number = RecordingGetResponse_FieldNumber_GenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingGetResponse_Storage, genreArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "subgenreArray",
        .number = RecordingGetResponse_FieldNumber_SubgenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingGetResponse_Storage, subgenreArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "feel",
        .number = RecordingGetResponse_FieldNumber_Feel,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingGetResponse_Storage, feel),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "solo",
        .number = RecordingGetResponse_FieldNumber_Solo,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .type = GPBTypeBool,
        .offset = offsetof(RecordingGetResponse_Storage, solo),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "uploaded",
        .number = RecordingGetResponse_FieldNumber_Uploaded,
        .hasIndex = 10,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(RecordingGetResponse_Storage, uploaded),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "format",
        .number = RecordingGetResponse_FieldNumber_Format,
        .hasIndex = 11,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(RecordingGetResponse_Storage, format),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "playCount",
        .number = RecordingGetResponse_FieldNumber_PlayCount,
        .hasIndex = 12,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingGetResponse_Storage, playCount),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "likeCount",
        .number = RecordingGetResponse_FieldNumber_LikeCount,
        .hasIndex = 13,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingGetResponse_Storage, likeCount),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[RecordingGetResponse class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(RecordingGetResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - FollowGetRequest

@implementation FollowGetRequest

@dynamic hasLoginToken, loginToken;
@dynamic hasUserid, userid;
@dynamic hasQueryUserid, queryUserid;

typedef struct FollowGetRequest_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  uint32_t queryUserid;
  NSString *loginToken;
} FollowGetRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .number = FollowGetRequest_FieldNumber_LoginToken,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(FollowGetRequest_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = FollowGetRequest_FieldNumber_Userid,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(FollowGetRequest_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "queryUserid",
        .number = FollowGetRequest_FieldNumber_QueryUserid,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(FollowGetRequest_Storage, queryUserid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[FollowGetRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(FollowGetRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - FollowGetResponse

@implementation FollowGetResponse

@dynamic userArray;

typedef struct FollowGetResponse_Storage {
  uint32_t _has_storage_[1];
  NSMutableArray *userArray;
} FollowGetResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userArray",
        .number = FollowGetResponse_FieldNumber_UserArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(FollowGetResponse_Storage, userArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(UserPreview),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[FollowGetResponse class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(FollowGetResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - UserDeleteRequest

@implementation UserDeleteRequest

@dynamic hasLoginToken, loginToken;
@dynamic hasUserid, userid;
@dynamic hasQueryUserid, queryUserid;

typedef struct UserDeleteRequest_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  uint32_t queryUserid;
  NSString *loginToken;
} UserDeleteRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .number = UserDeleteRequest_FieldNumber_LoginToken,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(UserDeleteRequest_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = UserDeleteRequest_FieldNumber_Userid,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserDeleteRequest_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "queryUserid",
        .number = UserDeleteRequest_FieldNumber_QueryUserid,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserDeleteRequest_Storage, queryUserid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[UserDeleteRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(UserDeleteRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - UserPreview

@implementation UserPreview

@dynamic hasUserid, userid;
@dynamic hasHandle, handle;
@dynamic hasName, name;
@dynamic hasProfilePicLink, profilePicLink;

typedef struct UserPreview_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  NSString *handle;
  NSString *name;
  NSString *profilePicLink;
} UserPreview_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = UserPreview_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserPreview_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "handle",
        .number = UserPreview_FieldNumber_Handle,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(UserPreview_Storage, handle),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = UserPreview_FieldNumber_Name,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(UserPreview_Storage, name),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "profilePicLink",
        .number = UserPreview_FieldNumber_ProfilePicLink,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(UserPreview_Storage, profilePicLink),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[UserPreview class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(UserPreview_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - UserFollowRequest

@implementation UserFollowRequest

@dynamic hasLoginToken, loginToken;
@dynamic hasUserid, userid;
@dynamic hasQueryUserid, queryUserid;

typedef struct UserFollowRequest_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  uint32_t queryUserid;
  NSString *loginToken;
} UserFollowRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .number = UserFollowRequest_FieldNumber_LoginToken,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(UserFollowRequest_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = UserFollowRequest_FieldNumber_Userid,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserFollowRequest_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "queryUserid",
        .number = UserFollowRequest_FieldNumber_QueryUserid,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserFollowRequest_Storage, queryUserid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[UserFollowRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(UserFollowRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - RecordingUploadRequest

@implementation RecordingUploadRequest

@dynamic hasUserid, userid;
@dynamic hasLoginToken, loginToken;
@dynamic hasTitle, title;
@dynamic hasBpm, bpm;
@dynamic hasBar, bar;
@dynamic hasKey, key;
@dynamic instrumentArray;
@dynamic familyArray;
@dynamic genreArray;
@dynamic subgenreArray;
@dynamic hasFeel, feel;
@dynamic hasSolo, solo;
@dynamic hasFormat, format;
@dynamic hasHandle, handle;

typedef struct RecordingUploadRequest_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  uint32_t bpm;
  uint32_t bar;
  uint32_t feel;
  NSString *loginToken;
  NSString *title;
  NSString *key;
  NSMutableArray *instrumentArray;
  NSMutableArray *familyArray;
  NSMutableArray *genreArray;
  NSMutableArray *subgenreArray;
  NSString *solo;
  NSString *format;
  NSString *handle;
} RecordingUploadRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = RecordingUploadRequest_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingUploadRequest_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "loginToken",
        .number = RecordingUploadRequest_FieldNumber_LoginToken,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "title",
        .number = RecordingUploadRequest_FieldNumber_Title,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, title),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bpm",
        .number = RecordingUploadRequest_FieldNumber_Bpm,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingUploadRequest_Storage, bpm),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bar",
        .number = RecordingUploadRequest_FieldNumber_Bar,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingUploadRequest_Storage, bar),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "key",
        .number = RecordingUploadRequest_FieldNumber_Key,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, key),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "instrumentArray",
        .number = RecordingUploadRequest_FieldNumber_InstrumentArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, instrumentArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "familyArray",
        .number = RecordingUploadRequest_FieldNumber_FamilyArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, familyArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "genreArray",
        .number = RecordingUploadRequest_FieldNumber_GenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, genreArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "subgenreArray",
        .number = RecordingUploadRequest_FieldNumber_SubgenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, subgenreArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "feel",
        .number = RecordingUploadRequest_FieldNumber_Feel,
        .hasIndex = 10,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingUploadRequest_Storage, feel),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "solo",
        .number = RecordingUploadRequest_FieldNumber_Solo,
        .hasIndex = 11,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, solo),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "format",
        .number = RecordingUploadRequest_FieldNumber_Format,
        .hasIndex = 12,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, format),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "handle",
        .number = RecordingUploadRequest_FieldNumber_Handle,
        .hasIndex = 13,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, handle),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[RecordingUploadRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(RecordingUploadRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - SuccessResponse

@implementation SuccessResponse

@dynamic hasSuccess, success;

typedef struct SuccessResponse_Storage {
  uint32_t _has_storage_[1];
  BOOL success;
} SuccessResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = SuccessResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeBool,
        .offset = offsetof(SuccessResponse_Storage, success),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[SuccessResponse class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(SuccessResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - RecordingSearchRequest

@implementation RecordingSearchRequest

@dynamic hasLoginToken, loginToken;
@dynamic hasUserid, userid;
@dynamic hasQuery, query;

typedef struct RecordingSearchRequest_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  NSString *loginToken;
  NSString *query;
} RecordingSearchRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .number = RecordingSearchRequest_FieldNumber_LoginToken,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RecordingSearchRequest_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = RecordingSearchRequest_FieldNumber_Userid,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingSearchRequest_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "query",
        .number = RecordingSearchRequest_FieldNumber_Query,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RecordingSearchRequest_Storage, query),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[RecordingSearchRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(RecordingSearchRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
