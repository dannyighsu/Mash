// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/mashservice.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "protos/Mashservice.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - MashserviceRoot

@implementation MashserviceRoot

@end

#pragma mark - MashserviceRoot_FileDescriptor

static GPBFileDescriptor *MashserviceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"mash.mashservice"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - RegisterRequest

@implementation RegisterRequest

@dynamic hasHandle, handle;
@dynamic hasEmail, email;
@dynamic hasPasswordHash, passwordHash;
@dynamic hasName, name;
@dynamic hasRegisterAgent, registerAgent;

typedef struct RegisterRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t registerAgent;
  NSString *handle;
  NSString *email;
  NSString *passwordHash;
  NSString *name;
} RegisterRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "handle",
        .number = RegisterRequest_FieldNumber_Handle,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RegisterRequest__storage_, handle),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = RegisterRequest_FieldNumber_Email,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RegisterRequest__storage_, email),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "passwordHash",
        .number = RegisterRequest_FieldNumber_PasswordHash,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RegisterRequest__storage_, passwordHash),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = RegisterRequest_FieldNumber_Name,
        .hasIndex = 3,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RegisterRequest__storage_, name),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "registerAgent",
        .number = RegisterRequest_FieldNumber_RegisterAgent,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(RegisterRequest__storage_, registerAgent),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterRequest class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RegisterRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RegisterResponse

@implementation RegisterResponse

@dynamic hasLoginToken, loginToken;
@dynamic hasUserid, userid;

typedef struct RegisterResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userid;
  NSString *loginToken;
} RegisterResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .number = RegisterResponse_FieldNumber_LoginToken,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RegisterResponse__storage_, loginToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = RegisterResponse_FieldNumber_Userid,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RegisterResponse__storage_, userid),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterResponse class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RegisterResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SignInRequest

@implementation SignInRequest

@dynamic hasHandle, handle;
@dynamic hasPasswordHash, passwordHash;

typedef struct SignInRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *handle;
  NSString *passwordHash;
} SignInRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "handle",
        .number = SignInRequest_FieldNumber_Handle,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SignInRequest__storage_, handle),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "passwordHash",
        .number = SignInRequest_FieldNumber_PasswordHash,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SignInRequest__storage_, passwordHash),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SignInRequest class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(SignInRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SignInResponse

@implementation SignInResponse

@dynamic hasUserid, userid;
@dynamic hasEmail, email;
@dynamic hasName, name;
@dynamic hasRegisterAgent, registerAgent;
@dynamic hasUserDescription, userDescription;
@dynamic hasLoginToken, loginToken;
@dynamic hasFollowersCount, followersCount;
@dynamic hasFollowingCount, followingCount;
@dynamic hasTrackCount, trackCount;

typedef struct SignInResponse__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userid;
  uint32_t registerAgent;
  uint32_t followersCount;
  uint32_t followingCount;
  uint32_t trackCount;
  NSString *email;
  NSString *name;
  NSString *userDescription;
  NSString *loginToken;
} SignInResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = SignInResponse_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(SignInResponse__storage_, userid),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = SignInResponse_FieldNumber_Email,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SignInResponse__storage_, email),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = SignInResponse_FieldNumber_Name,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SignInResponse__storage_, name),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "registerAgent",
        .number = SignInResponse_FieldNumber_RegisterAgent,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(SignInResponse__storage_, registerAgent),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userDescription",
        .number = SignInResponse_FieldNumber_UserDescription,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SignInResponse__storage_, userDescription),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "loginToken",
        .number = SignInResponse_FieldNumber_LoginToken,
        .hasIndex = 5,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SignInResponse__storage_, loginToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "followersCount",
        .number = SignInResponse_FieldNumber_FollowersCount,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(SignInResponse__storage_, followersCount),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "followingCount",
        .number = SignInResponse_FieldNumber_FollowingCount,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(SignInResponse__storage_, followingCount),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "trackCount",
        .number = SignInResponse_FieldNumber_TrackCount,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(SignInResponse__storage_, trackCount),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SignInResponse class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(SignInResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserResponse

@implementation UserResponse

@dynamic hasHandle, handle;
@dynamic hasEmail, email;
@dynamic hasName, name;
@dynamic hasUserDescription, userDescription;
@dynamic hasFollowersCount, followersCount;
@dynamic hasFollowingCount, followingCount;
@dynamic hasTrackCount, trackCount;
@dynamic hasFollow, follow;

typedef struct UserResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL follow;
  uint32_t followersCount;
  uint32_t followingCount;
  uint32_t trackCount;
  NSString *handle;
  NSString *email;
  NSString *name;
  NSString *userDescription;
} UserResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "handle",
        .number = UserResponse_FieldNumber_Handle,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserResponse__storage_, handle),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = UserResponse_FieldNumber_Email,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserResponse__storage_, email),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = UserResponse_FieldNumber_Name,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserResponse__storage_, name),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userDescription",
        .number = UserResponse_FieldNumber_UserDescription,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserResponse__storage_, userDescription),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "followersCount",
        .number = UserResponse_FieldNumber_FollowersCount,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(UserResponse__storage_, followersCount),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "followingCount",
        .number = UserResponse_FieldNumber_FollowingCount,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(UserResponse__storage_, followingCount),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "trackCount",
        .number = UserResponse_FieldNumber_TrackCount,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(UserResponse__storage_, trackCount),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "follow",
        .number = UserResponse_FieldNumber_Follow,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(UserResponse__storage_, follow),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserResponse class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RecordingRequest

@implementation RecordingRequest

@dynamic hasLoginToken, loginToken;
@dynamic hasUserid, userid;
@dynamic hasRecid, recid;

typedef struct RecordingRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userid;
  uint32_t recid;
  NSString *loginToken;
} RecordingRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .number = RecordingRequest_FieldNumber_LoginToken,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingRequest__storage_, loginToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = RecordingRequest_FieldNumber_Userid,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingRequest__storage_, userid),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "recid",
        .number = RecordingRequest_FieldNumber_Recid,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingRequest__storage_, recid),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RecordingRequest class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RecordingRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RecordingResponse

@implementation RecordingResponse

@dynamic hasTitle, title;
@dynamic hasBpm, bpm;
@dynamic hasBar, bar;
@dynamic hasKey, key;
@dynamic instrumentArray, instrumentArray_Count;
@dynamic familyArray, familyArray_Count;
@dynamic genreArray, genreArray_Count;
@dynamic subgenreArray, subgenreArray_Count;
@dynamic hasFeel, feel;
@dynamic hasSolo, solo;
@dynamic hasUploaded, uploaded;
@dynamic hasFormat, format;
@dynamic hasPlayCount, playCount;
@dynamic hasLikeCount, likeCount;
@dynamic hasRecid, recid;
@dynamic hasUserid, userid;
@dynamic hasHandle, handle;

typedef struct RecordingResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL solo;
  uint32_t bpm;
  uint32_t bar;
  uint32_t feel;
  uint32_t playCount;
  uint32_t likeCount;
  uint32_t recid;
  uint32_t userid;
  NSString *title;
  NSString *key;
  NSMutableArray *instrumentArray;
  NSMutableArray *familyArray;
  NSMutableArray *genreArray;
  NSMutableArray *subgenreArray;
  NSString *uploaded;
  NSString *format;
  NSString *handle;
} RecordingResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .number = RecordingResponse_FieldNumber_Title,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingResponse__storage_, title),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bpm",
        .number = RecordingResponse_FieldNumber_Bpm,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingResponse__storage_, bpm),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bar",
        .number = RecordingResponse_FieldNumber_Bar,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingResponse__storage_, bar),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "key",
        .number = RecordingResponse_FieldNumber_Key,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingResponse__storage_, key),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "instrumentArray",
        .number = RecordingResponse_FieldNumber_InstrumentArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingResponse__storage_, instrumentArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "familyArray",
        .number = RecordingResponse_FieldNumber_FamilyArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingResponse__storage_, familyArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "genreArray",
        .number = RecordingResponse_FieldNumber_GenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingResponse__storage_, genreArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "subgenreArray",
        .number = RecordingResponse_FieldNumber_SubgenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingResponse__storage_, subgenreArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "feel",
        .number = RecordingResponse_FieldNumber_Feel,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingResponse__storage_, feel),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "solo",
        .number = RecordingResponse_FieldNumber_Solo,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RecordingResponse__storage_, solo),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "uploaded",
        .number = RecordingResponse_FieldNumber_Uploaded,
        .hasIndex = 10,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingResponse__storage_, uploaded),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "format",
        .number = RecordingResponse_FieldNumber_Format,
        .hasIndex = 11,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingResponse__storage_, format),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "playCount",
        .number = RecordingResponse_FieldNumber_PlayCount,
        .hasIndex = 12,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingResponse__storage_, playCount),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "likeCount",
        .number = RecordingResponse_FieldNumber_LikeCount,
        .hasIndex = 13,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingResponse__storage_, likeCount),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "recid",
        .number = RecordingResponse_FieldNumber_Recid,
        .hasIndex = 14,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingResponse__storage_, recid),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = RecordingResponse_FieldNumber_Userid,
        .hasIndex = 15,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingResponse__storage_, userid),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "handle",
        .number = RecordingResponse_FieldNumber_Handle,
        .hasIndex = 16,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingResponse__storage_, handle),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RecordingResponse class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RecordingResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserRecordingsResponse

@implementation UserRecordingsResponse

@dynamic recArray, recArray_Count;

typedef struct UserRecordingsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *recArray;
} UserRecordingsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recArray",
        .number = UserRecordingsResponse_FieldNumber_RecArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(UserRecordingsResponse__storage_, recArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(RecordingResponse),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserRecordingsResponse class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserRecordingsResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FollowGetResponse

@implementation FollowGetResponse

@dynamic userArray, userArray_Count;

typedef struct FollowGetResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *userArray;
} FollowGetResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userArray",
        .number = FollowGetResponse_FieldNumber_UserArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(FollowGetResponse__storage_, userArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(UserPreview),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FollowGetResponse class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(FollowGetResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserPreview

@implementation UserPreview

@dynamic hasUserid, userid;
@dynamic hasHandle, handle;
@dynamic hasName, name;

typedef struct UserPreview__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userid;
  NSString *handle;
  NSString *name;
} UserPreview__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = UserPreview_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(UserPreview__storage_, userid),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "handle",
        .number = UserPreview_FieldNumber_Handle,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserPreview__storage_, handle),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = UserPreview_FieldNumber_Name,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserPreview__storage_, name),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserPreview class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserPreview__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserRequest

@implementation UserRequest

@dynamic hasLoginToken, loginToken;
@dynamic hasUserid, userid;
@dynamic hasQueryUserid, queryUserid;

typedef struct UserRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userid;
  uint32_t queryUserid;
  NSString *loginToken;
} UserRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .number = UserRequest_FieldNumber_LoginToken,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserRequest__storage_, loginToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = UserRequest_FieldNumber_Userid,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(UserRequest__storage_, userid),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "queryUserid",
        .number = UserRequest_FieldNumber_QueryUserid,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(UserRequest__storage_, queryUserid),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserRequest class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RecordingUploadRequest

@implementation RecordingUploadRequest

@dynamic hasUserid, userid;
@dynamic hasLoginToken, loginToken;
@dynamic hasTitle, title;
@dynamic hasBpm, bpm;
@dynamic hasBar, bar;
@dynamic hasKey, key;
@dynamic instrumentArray, instrumentArray_Count;
@dynamic familyArray, familyArray_Count;
@dynamic genreArray, genreArray_Count;
@dynamic subgenreArray, subgenreArray_Count;
@dynamic hasFeel, feel;
@dynamic hasSolo, solo;
@dynamic hasFormat, format;

typedef struct RecordingUploadRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL solo;
  uint32_t userid;
  uint32_t bpm;
  uint32_t bar;
  uint32_t feel;
  NSString *loginToken;
  NSString *title;
  NSString *key;
  NSMutableArray *instrumentArray;
  NSMutableArray *familyArray;
  NSMutableArray *genreArray;
  NSMutableArray *subgenreArray;
  NSString *format;
} RecordingUploadRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = RecordingUploadRequest_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingUploadRequest__storage_, userid),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "loginToken",
        .number = RecordingUploadRequest_FieldNumber_LoginToken,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingUploadRequest__storage_, loginToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "title",
        .number = RecordingUploadRequest_FieldNumber_Title,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingUploadRequest__storage_, title),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bpm",
        .number = RecordingUploadRequest_FieldNumber_Bpm,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingUploadRequest__storage_, bpm),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bar",
        .number = RecordingUploadRequest_FieldNumber_Bar,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingUploadRequest__storage_, bar),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "key",
        .number = RecordingUploadRequest_FieldNumber_Key,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingUploadRequest__storage_, key),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "instrumentArray",
        .number = RecordingUploadRequest_FieldNumber_InstrumentArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingUploadRequest__storage_, instrumentArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "familyArray",
        .number = RecordingUploadRequest_FieldNumber_FamilyArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingUploadRequest__storage_, familyArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "genreArray",
        .number = RecordingUploadRequest_FieldNumber_GenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingUploadRequest__storage_, genreArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "subgenreArray",
        .number = RecordingUploadRequest_FieldNumber_SubgenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingUploadRequest__storage_, subgenreArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "feel",
        .number = RecordingUploadRequest_FieldNumber_Feel,
        .hasIndex = 10,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingUploadRequest__storage_, feel),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "solo",
        .number = RecordingUploadRequest_FieldNumber_Solo,
        .hasIndex = 11,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RecordingUploadRequest__storage_, solo),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "format",
        .number = RecordingUploadRequest_FieldNumber_Format,
        .hasIndex = 12,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingUploadRequest__storage_, format),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RecordingUploadRequest class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RecordingUploadRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RecordingUpdateRequest

@implementation RecordingUpdateRequest

@dynamic hasUserid, userid;
@dynamic hasLoginToken, loginToken;
@dynamic hasRecid, recid;
@dynamic hasTitle, title;
@dynamic instrumentArray, instrumentArray_Count;
@dynamic familyArray, familyArray_Count;
@dynamic genreArray, genreArray_Count;
@dynamic subgenreArray, subgenreArray_Count;
@dynamic hasFeel, feel;
@dynamic hasSolo, solo;

typedef struct RecordingUpdateRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL solo;
  uint32_t userid;
  uint32_t recid;
  uint32_t feel;
  NSString *loginToken;
  NSString *title;
  NSMutableArray *instrumentArray;
  NSMutableArray *familyArray;
  NSMutableArray *genreArray;
  NSMutableArray *subgenreArray;
} RecordingUpdateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = RecordingUpdateRequest_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingUpdateRequest__storage_, userid),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "loginToken",
        .number = RecordingUpdateRequest_FieldNumber_LoginToken,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingUpdateRequest__storage_, loginToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "recid",
        .number = RecordingUpdateRequest_FieldNumber_Recid,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingUpdateRequest__storage_, recid),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "title",
        .number = RecordingUpdateRequest_FieldNumber_Title,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingUpdateRequest__storage_, title),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "instrumentArray",
        .number = RecordingUpdateRequest_FieldNumber_InstrumentArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingUpdateRequest__storage_, instrumentArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "familyArray",
        .number = RecordingUpdateRequest_FieldNumber_FamilyArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingUpdateRequest__storage_, familyArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "genreArray",
        .number = RecordingUpdateRequest_FieldNumber_GenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingUpdateRequest__storage_, genreArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "subgenreArray",
        .number = RecordingUpdateRequest_FieldNumber_SubgenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingUpdateRequest__storage_, subgenreArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "feel",
        .number = RecordingUpdateRequest_FieldNumber_Feel,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingUpdateRequest__storage_, feel),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "solo",
        .number = RecordingUpdateRequest_FieldNumber_Solo,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RecordingUpdateRequest__storage_, solo),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RecordingUpdateRequest class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RecordingUpdateRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SuccessResponse

@implementation SuccessResponse

@dynamic hasSuccess, success;

typedef struct SuccessResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
} SuccessResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = SuccessResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(SuccessResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SuccessResponse class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(SuccessResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RecordingSearchRequest

@implementation RecordingSearchRequest

@dynamic hasLoginToken, loginToken;
@dynamic hasUserid, userid;
@dynamic hasQuery, query;

typedef struct RecordingSearchRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userid;
  NSString *loginToken;
  NSString *query;
} RecordingSearchRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .number = RecordingSearchRequest_FieldNumber_LoginToken,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingSearchRequest__storage_, loginToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = RecordingSearchRequest_FieldNumber_Userid,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(RecordingSearchRequest__storage_, userid),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "query",
        .number = RecordingSearchRequest_FieldNumber_Query,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RecordingSearchRequest__storage_, query),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RecordingSearchRequest class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RecordingSearchRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserUpdateRequest

@implementation UserUpdateRequest

@dynamic hasUserid, userid;
@dynamic hasLoginToken, loginToken;
@dynamic hasEmail, email;
@dynamic hasPasswordHash, passwordHash;
@dynamic hasName, name;
@dynamic hasUserDescription, userDescription;

typedef struct UserUpdateRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userid;
  NSString *loginToken;
  NSString *email;
  NSString *passwordHash;
  NSString *name;
  NSString *userDescription;
} UserUpdateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = UserUpdateRequest_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(UserUpdateRequest__storage_, userid),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "loginToken",
        .number = UserUpdateRequest_FieldNumber_LoginToken,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserUpdateRequest__storage_, loginToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = UserUpdateRequest_FieldNumber_Email,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserUpdateRequest__storage_, email),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "passwordHash",
        .number = UserUpdateRequest_FieldNumber_PasswordHash,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserUpdateRequest__storage_, passwordHash),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = UserUpdateRequest_FieldNumber_Name,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserUpdateRequest__storage_, name),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userDescription",
        .number = UserUpdateRequest_FieldNumber_UserDescription,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserUpdateRequest__storage_, userDescription),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserUpdateRequest class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserUpdateRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FeedResponse

@implementation FeedResponse

@dynamic storyArray, storyArray_Count;

typedef struct FeedResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *storyArray;
} FeedResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "storyArray",
        .number = FeedResponse_FieldNumber_StoryArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(FeedResponse__storage_, storyArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(RecordingResponse),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FeedResponse class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(FeedResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FeedRequest

@implementation FeedRequest

@dynamic hasUser, user;
@dynamic hasScroll, scroll;

typedef struct FeedRequest__storage_ {
  uint32_t _has_storage_[1];
  UserRequest *user;
  ScrollRequest *scroll;
} FeedRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .number = FeedRequest_FieldNumber_User,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(FeedRequest__storage_, user),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(UserRequest),
        .fieldOptions = NULL,
      },
      {
        .name = "scroll",
        .number = FeedRequest_FieldNumber_Scroll,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(FeedRequest__storage_, scroll),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ScrollRequest),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FeedRequest class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(FeedRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ScrollRequest

@implementation ScrollRequest

@dynamic hasOffset, offset;
@dynamic hasUpdated, updated;

typedef struct ScrollRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t offset;
  NSString *updated;
} ScrollRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "offset",
        .number = ScrollRequest_FieldNumber_Offset,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(ScrollRequest__storage_, offset),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "updated",
        .number = ScrollRequest_FieldNumber_Updated,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ScrollRequest__storage_, updated),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ScrollRequest class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ScrollRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FeedStory

@implementation FeedStory

@dynamic hasRecording, recording;
@dynamic hasUser, user;

typedef struct FeedStory__storage_ {
  uint32_t _has_storage_[1];
  RecordingResponse *recording;
  UserPreview *user;
} FeedStory__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recording",
        .number = FeedStory_FieldNumber_Recording,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(FeedStory__storage_, recording),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(RecordingResponse),
        .fieldOptions = NULL,
      },
      {
        .name = "user",
        .number = FeedStory_FieldNumber_User,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(FeedStory__storage_, user),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(UserPreview),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FeedStory class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(FeedStory__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchTagRequest

@implementation SearchTagRequest

@dynamic hasUserid, userid;
@dynamic hasLoginToken, loginToken;
@dynamic hasLBpm, lBpm;
@dynamic hasHBpm, hBpm;
@dynamic hasBar, bar;
@dynamic hasKey, key;
@dynamic instrumentArray, instrumentArray_Count;
@dynamic familyArray, familyArray_Count;
@dynamic genreArray, genreArray_Count;
@dynamic subgenreArray, subgenreArray_Count;
@dynamic hasSolo, solo;

typedef struct SearchTagRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL solo;
  uint32_t userid;
  uint32_t lBpm;
  uint32_t hBpm;
  uint32_t bar;
  NSString *loginToken;
  NSString *key;
  NSMutableArray *instrumentArray;
  NSMutableArray *familyArray;
  NSMutableArray *genreArray;
  NSMutableArray *subgenreArray;
} SearchTagRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = SearchTagRequest_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(SearchTagRequest__storage_, userid),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "loginToken",
        .number = SearchTagRequest_FieldNumber_LoginToken,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SearchTagRequest__storage_, loginToken),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "lBpm",
        .number = SearchTagRequest_FieldNumber_LBpm,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(SearchTagRequest__storage_, lBpm),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "hBpm",
        .number = SearchTagRequest_FieldNumber_HBpm,
        .hasIndex = 3,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(SearchTagRequest__storage_, hBpm),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bar",
        .number = SearchTagRequest_FieldNumber_Bar,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(SearchTagRequest__storage_, bar),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "key",
        .number = SearchTagRequest_FieldNumber_Key,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SearchTagRequest__storage_, key),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "instrumentArray",
        .number = SearchTagRequest_FieldNumber_InstrumentArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SearchTagRequest__storage_, instrumentArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "familyArray",
        .number = SearchTagRequest_FieldNumber_FamilyArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SearchTagRequest__storage_, familyArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "genreArray",
        .number = SearchTagRequest_FieldNumber_GenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SearchTagRequest__storage_, genreArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "subgenreArray",
        .number = SearchTagRequest_FieldNumber_SubgenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SearchTagRequest__storage_, subgenreArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "solo",
        .number = SearchTagRequest_FieldNumber_Solo,
        .hasIndex = 10,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(SearchTagRequest__storage_, solo),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\002\003\004\000\004\004\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchTagRequest class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(SearchTagRequest__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Recordings

@implementation Recordings

@dynamic recordingArray, recordingArray_Count;

typedef struct Recordings__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *recordingArray;
} Recordings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recordingArray",
        .number = Recordings_FieldNumber_RecordingArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(Recordings__storage_, recordingArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(RecordingResponse),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Recordings class]
                                     rootClass:[MashserviceRoot class]
                                          file:MashserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(Recordings__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
