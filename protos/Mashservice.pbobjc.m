// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/mashservice.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "protos/Mashservice.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - MashserviceRoot

@implementation MashserviceRoot

@end

static GPBFileDescriptor *MashserviceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"mash.mashservice"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - RegisterRequest

@implementation RegisterRequest

@dynamic hasHandle, handle;
@dynamic hasEmail, email;
@dynamic hasPasswordHash, passwordHash;
@dynamic hasName, name;
@dynamic hasRegisterAgent, registerAgent;

typedef struct RegisterRequest_Storage {
  uint32_t _has_storage_[1];
  int32_t registerAgent;
  NSString *handle;
  NSString *email;
  NSString *passwordHash;
  NSString *name;
} RegisterRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "handle",
        .number = RegisterRequest_FieldNumber_Handle,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RegisterRequest_Storage, handle),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = RegisterRequest_FieldNumber_Email,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RegisterRequest_Storage, email),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "passwordHash",
        .number = RegisterRequest_FieldNumber_PasswordHash,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RegisterRequest_Storage, passwordHash),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = RegisterRequest_FieldNumber_Name,
        .hasIndex = 3,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RegisterRequest_Storage, name),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "registerAgent",
        .number = RegisterRequest_FieldNumber_RegisterAgent,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt32,
        .offset = offsetof(RegisterRequest_Storage, registerAgent),
        .defaultValue.valueInt32 = 0,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[RegisterRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(RegisterRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - RegisterResponse

@implementation RegisterResponse

@dynamic hasLoginToken, loginToken;
@dynamic hasUserid, userid;

typedef struct RegisterResponse_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  NSString *loginToken;
} RegisterResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .number = RegisterResponse_FieldNumber_LoginToken,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RegisterResponse_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = RegisterResponse_FieldNumber_Userid,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(RegisterResponse_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[RegisterResponse class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(RegisterResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - SignInRequest

@implementation SignInRequest

@dynamic hasHandle, handle;
@dynamic hasPasswordHash, passwordHash;

typedef struct SignInRequest_Storage {
  uint32_t _has_storage_[1];
  NSString *handle;
  NSString *passwordHash;
} SignInRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "handle",
        .number = SignInRequest_FieldNumber_Handle,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(SignInRequest_Storage, handle),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "passwordHash",
        .number = SignInRequest_FieldNumber_PasswordHash,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(SignInRequest_Storage, passwordHash),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[SignInRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(SignInRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - SignInResponse

@implementation SignInResponse

@dynamic hasUserid, userid;
@dynamic hasEmail, email;
@dynamic hasName, name;
@dynamic hasRegisterAgent, registerAgent;
@dynamic hasUserDescription, userDescription;
@dynamic hasLoginToken, loginToken;
@dynamic hasFollowersCount, followersCount;
@dynamic hasFollowingCount, followingCount;
@dynamic hasTrackCount, trackCount;

typedef struct SignInResponse_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  uint32_t registerAgent;
  uint32_t followersCount;
  uint32_t followingCount;
  uint32_t trackCount;
  NSString *email;
  NSString *name;
  NSString *userDescription;
  NSString *loginToken;
} SignInResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = SignInResponse_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(SignInResponse_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = SignInResponse_FieldNumber_Email,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(SignInResponse_Storage, email),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = SignInResponse_FieldNumber_Name,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(SignInResponse_Storage, name),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "registerAgent",
        .number = SignInResponse_FieldNumber_RegisterAgent,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(SignInResponse_Storage, registerAgent),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userDescription",
        .number = SignInResponse_FieldNumber_UserDescription,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(SignInResponse_Storage, userDescription),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "loginToken",
        .number = SignInResponse_FieldNumber_LoginToken,
        .hasIndex = 5,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(SignInResponse_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "followersCount",
        .number = SignInResponse_FieldNumber_FollowersCount,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(SignInResponse_Storage, followersCount),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "followingCount",
        .number = SignInResponse_FieldNumber_FollowingCount,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(SignInResponse_Storage, followingCount),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "trackCount",
        .number = SignInResponse_FieldNumber_TrackCount,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(SignInResponse_Storage, trackCount),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[SignInResponse class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(SignInResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - UserResponse

@implementation UserResponse

@dynamic hasHandle, handle;
@dynamic hasEmail, email;
@dynamic hasName, name;
@dynamic hasUserDescription, userDescription;
@dynamic hasFollowersCount, followersCount;
@dynamic hasFollowingCount, followingCount;
@dynamic hasTrackCount, trackCount;
@dynamic hasFollow, follow;

typedef struct UserResponse_Storage {
  uint32_t _has_storage_[1];
  BOOL follow;
  uint32_t followersCount;
  uint32_t followingCount;
  uint32_t trackCount;
  NSString *handle;
  NSString *email;
  NSString *name;
  NSString *userDescription;
} UserResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "handle",
        .number = UserResponse_FieldNumber_Handle,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(UserResponse_Storage, handle),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = UserResponse_FieldNumber_Email,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(UserResponse_Storage, email),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = UserResponse_FieldNumber_Name,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(UserResponse_Storage, name),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userDescription",
        .number = UserResponse_FieldNumber_UserDescription,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(UserResponse_Storage, userDescription),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "followersCount",
        .number = UserResponse_FieldNumber_FollowersCount,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserResponse_Storage, followersCount),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "followingCount",
        .number = UserResponse_FieldNumber_FollowingCount,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserResponse_Storage, followingCount),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "trackCount",
        .number = UserResponse_FieldNumber_TrackCount,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserResponse_Storage, trackCount),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "follow",
        .number = UserResponse_FieldNumber_Follow,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .type = GPBTypeBool,
        .offset = offsetof(UserResponse_Storage, follow),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[UserResponse class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(UserResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - RecordingRequest

@implementation RecordingRequest

@dynamic hasLoginToken, loginToken;
@dynamic hasUserid, userid;
@dynamic hasRecid, recid;

typedef struct RecordingRequest_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  uint32_t recid;
  NSString *loginToken;
} RecordingRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .number = RecordingRequest_FieldNumber_LoginToken,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RecordingRequest_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = RecordingRequest_FieldNumber_Userid,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingRequest_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "recid",
        .number = RecordingRequest_FieldNumber_Recid,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingRequest_Storage, recid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[RecordingRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(RecordingRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - RecordingResponse

@implementation RecordingResponse

@dynamic hasTitle, title;
@dynamic hasBpm, bpm;
@dynamic hasBar, bar;
@dynamic hasKey, key;
@dynamic instrumentArray;
@dynamic familyArray;
@dynamic genreArray;
@dynamic subgenreArray;
@dynamic hasFeel, feel;
@dynamic hasSolo, solo;
@dynamic hasUploaded, uploaded;
@dynamic hasFormat, format;
@dynamic hasPlayCount, playCount;
@dynamic hasLikeCount, likeCount;
@dynamic hasRecid, recid;
@dynamic hasUserid, userid;
@dynamic hasHandle, handle;

typedef struct RecordingResponse_Storage {
  uint32_t _has_storage_[1];
  BOOL solo;
  uint32_t bpm;
  uint32_t bar;
  uint32_t feel;
  uint32_t playCount;
  uint32_t likeCount;
  uint32_t recid;
  uint32_t userid;
  NSString *title;
  NSString *key;
  NSMutableArray *instrumentArray;
  NSMutableArray *familyArray;
  NSMutableArray *genreArray;
  NSMutableArray *subgenreArray;
  NSString *uploaded;
  NSString *format;
  NSString *handle;
} RecordingResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .number = RecordingResponse_FieldNumber_Title,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RecordingResponse_Storage, title),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bpm",
        .number = RecordingResponse_FieldNumber_Bpm,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingResponse_Storage, bpm),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bar",
        .number = RecordingResponse_FieldNumber_Bar,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingResponse_Storage, bar),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "key",
        .number = RecordingResponse_FieldNumber_Key,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(RecordingResponse_Storage, key),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "instrumentArray",
        .number = RecordingResponse_FieldNumber_InstrumentArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingResponse_Storage, instrumentArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "familyArray",
        .number = RecordingResponse_FieldNumber_FamilyArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingResponse_Storage, familyArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "genreArray",
        .number = RecordingResponse_FieldNumber_GenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingResponse_Storage, genreArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "subgenreArray",
        .number = RecordingResponse_FieldNumber_SubgenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingResponse_Storage, subgenreArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "feel",
        .number = RecordingResponse_FieldNumber_Feel,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingResponse_Storage, feel),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "solo",
        .number = RecordingResponse_FieldNumber_Solo,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .type = GPBTypeBool,
        .offset = offsetof(RecordingResponse_Storage, solo),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "uploaded",
        .number = RecordingResponse_FieldNumber_Uploaded,
        .hasIndex = 10,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(RecordingResponse_Storage, uploaded),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "format",
        .number = RecordingResponse_FieldNumber_Format,
        .hasIndex = 11,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(RecordingResponse_Storage, format),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "playCount",
        .number = RecordingResponse_FieldNumber_PlayCount,
        .hasIndex = 12,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingResponse_Storage, playCount),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "likeCount",
        .number = RecordingResponse_FieldNumber_LikeCount,
        .hasIndex = 13,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingResponse_Storage, likeCount),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "recid",
        .number = RecordingResponse_FieldNumber_Recid,
        .hasIndex = 14,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingResponse_Storage, recid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = RecordingResponse_FieldNumber_Userid,
        .hasIndex = 15,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingResponse_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "handle",
        .number = RecordingResponse_FieldNumber_Handle,
        .hasIndex = 16,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(RecordingResponse_Storage, handle),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[RecordingResponse class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(RecordingResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - UserRecordingsResponse

@implementation UserRecordingsResponse

@dynamic recArray;

typedef struct UserRecordingsResponse_Storage {
  uint32_t _has_storage_[1];
  NSMutableArray *recArray;
} UserRecordingsResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recArray",
        .number = UserRecordingsResponse_FieldNumber_RecArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(UserRecordingsResponse_Storage, recArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(RecordingResponse),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[UserRecordingsResponse class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(UserRecordingsResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - FollowGetResponse

@implementation FollowGetResponse

@dynamic userArray;

typedef struct FollowGetResponse_Storage {
  uint32_t _has_storage_[1];
  NSMutableArray *userArray;
} FollowGetResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userArray",
        .number = FollowGetResponse_FieldNumber_UserArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(FollowGetResponse_Storage, userArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(UserPreview),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[FollowGetResponse class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(FollowGetResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - UserPreview

@implementation UserPreview

@dynamic hasUserid, userid;
@dynamic hasHandle, handle;
@dynamic hasName, name;

typedef struct UserPreview_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  NSString *handle;
  NSString *name;
} UserPreview_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = UserPreview_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserPreview_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "handle",
        .number = UserPreview_FieldNumber_Handle,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(UserPreview_Storage, handle),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = UserPreview_FieldNumber_Name,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(UserPreview_Storage, name),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[UserPreview class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(UserPreview_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - UserRequest

@implementation UserRequest

@dynamic hasLoginToken, loginToken;
@dynamic hasUserid, userid;
@dynamic hasQueryUserid, queryUserid;

typedef struct UserRequest_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  uint32_t queryUserid;
  NSString *loginToken;
} UserRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .number = UserRequest_FieldNumber_LoginToken,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(UserRequest_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = UserRequest_FieldNumber_Userid,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserRequest_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "queryUserid",
        .number = UserRequest_FieldNumber_QueryUserid,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserRequest_Storage, queryUserid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[UserRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(UserRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - RecordingUploadRequest

@implementation RecordingUploadRequest

@dynamic hasUserid, userid;
@dynamic hasLoginToken, loginToken;
@dynamic hasTitle, title;
@dynamic hasBpm, bpm;
@dynamic hasBar, bar;
@dynamic hasKey, key;
@dynamic instrumentArray;
@dynamic familyArray;
@dynamic genreArray;
@dynamic subgenreArray;
@dynamic hasFeel, feel;
@dynamic hasSolo, solo;
@dynamic hasFormat, format;

typedef struct RecordingUploadRequest_Storage {
  uint32_t _has_storage_[1];
  BOOL solo;
  uint32_t userid;
  uint32_t bpm;
  uint32_t bar;
  uint32_t feel;
  NSString *loginToken;
  NSString *title;
  NSString *key;
  NSMutableArray *instrumentArray;
  NSMutableArray *familyArray;
  NSMutableArray *genreArray;
  NSMutableArray *subgenreArray;
  NSString *format;
} RecordingUploadRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = RecordingUploadRequest_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingUploadRequest_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "loginToken",
        .number = RecordingUploadRequest_FieldNumber_LoginToken,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "title",
        .number = RecordingUploadRequest_FieldNumber_Title,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, title),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bpm",
        .number = RecordingUploadRequest_FieldNumber_Bpm,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingUploadRequest_Storage, bpm),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "bar",
        .number = RecordingUploadRequest_FieldNumber_Bar,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingUploadRequest_Storage, bar),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "key",
        .number = RecordingUploadRequest_FieldNumber_Key,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, key),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "instrumentArray",
        .number = RecordingUploadRequest_FieldNumber_InstrumentArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, instrumentArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "familyArray",
        .number = RecordingUploadRequest_FieldNumber_FamilyArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, familyArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "genreArray",
        .number = RecordingUploadRequest_FieldNumber_GenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, genreArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "subgenreArray",
        .number = RecordingUploadRequest_FieldNumber_SubgenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, subgenreArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "feel",
        .number = RecordingUploadRequest_FieldNumber_Feel,
        .hasIndex = 10,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingUploadRequest_Storage, feel),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "solo",
        .number = RecordingUploadRequest_FieldNumber_Solo,
        .hasIndex = 11,
        .flags = GPBFieldOptional,
        .type = GPBTypeBool,
        .offset = offsetof(RecordingUploadRequest_Storage, solo),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "format",
        .number = RecordingUploadRequest_FieldNumber_Format,
        .hasIndex = 12,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUploadRequest_Storage, format),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[RecordingUploadRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(RecordingUploadRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - RecordingUpdateRequest

@implementation RecordingUpdateRequest

@dynamic hasUserid, userid;
@dynamic hasLoginToken, loginToken;
@dynamic hasRecid, recid;
@dynamic hasTitle, title;
@dynamic instrumentArray;
@dynamic familyArray;
@dynamic genreArray;
@dynamic subgenreArray;
@dynamic hasFeel, feel;
@dynamic hasSolo, solo;

typedef struct RecordingUpdateRequest_Storage {
  uint32_t _has_storage_[1];
  BOOL solo;
  uint32_t userid;
  uint32_t recid;
  uint32_t feel;
  NSString *loginToken;
  NSString *title;
  NSMutableArray *instrumentArray;
  NSMutableArray *familyArray;
  NSMutableArray *genreArray;
  NSMutableArray *subgenreArray;
} RecordingUpdateRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = RecordingUpdateRequest_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingUpdateRequest_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "loginToken",
        .number = RecordingUpdateRequest_FieldNumber_LoginToken,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUpdateRequest_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "recid",
        .number = RecordingUpdateRequest_FieldNumber_Recid,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingUpdateRequest_Storage, recid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "title",
        .number = RecordingUpdateRequest_FieldNumber_Title,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUpdateRequest_Storage, title),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "instrumentArray",
        .number = RecordingUpdateRequest_FieldNumber_InstrumentArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUpdateRequest_Storage, instrumentArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "familyArray",
        .number = RecordingUpdateRequest_FieldNumber_FamilyArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUpdateRequest_Storage, familyArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "genreArray",
        .number = RecordingUpdateRequest_FieldNumber_GenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUpdateRequest_Storage, genreArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "subgenreArray",
        .number = RecordingUpdateRequest_FieldNumber_SubgenreArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeString,
        .offset = offsetof(RecordingUpdateRequest_Storage, subgenreArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "feel",
        .number = RecordingUpdateRequest_FieldNumber_Feel,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingUpdateRequest_Storage, feel),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "solo",
        .number = RecordingUpdateRequest_FieldNumber_Solo,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .type = GPBTypeBool,
        .offset = offsetof(RecordingUpdateRequest_Storage, solo),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[RecordingUpdateRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(RecordingUpdateRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - SuccessResponse

@implementation SuccessResponse

@dynamic hasSuccess, success;

typedef struct SuccessResponse_Storage {
  uint32_t _has_storage_[1];
  BOOL success;
} SuccessResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = SuccessResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeBool,
        .offset = offsetof(SuccessResponse_Storage, success),
        .defaultValue.valueBool = NO,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[SuccessResponse class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(SuccessResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - RecordingSearchRequest

@implementation RecordingSearchRequest

@dynamic hasLoginToken, loginToken;
@dynamic hasUserid, userid;
@dynamic hasQuery, query;

typedef struct RecordingSearchRequest_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  NSString *loginToken;
  NSString *query;
} RecordingSearchRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "loginToken",
        .number = RecordingSearchRequest_FieldNumber_LoginToken,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RecordingSearchRequest_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userid",
        .number = RecordingSearchRequest_FieldNumber_Userid,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(RecordingSearchRequest_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "query",
        .number = RecordingSearchRequest_FieldNumber_Query,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(RecordingSearchRequest_Storage, query),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[RecordingSearchRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(RecordingSearchRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - UserUpdateRequest

@implementation UserUpdateRequest

@dynamic hasUserid, userid;
@dynamic hasLoginToken, loginToken;
@dynamic hasEmail, email;
@dynamic hasPasswordHash, passwordHash;
@dynamic hasName, name;
@dynamic hasUserDescription, userDescription;

typedef struct UserUpdateRequest_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  NSString *loginToken;
  NSString *email;
  NSString *passwordHash;
  NSString *name;
  NSString *userDescription;
} UserUpdateRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = UserUpdateRequest_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(UserUpdateRequest_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "loginToken",
        .number = UserUpdateRequest_FieldNumber_LoginToken,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(UserUpdateRequest_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = UserUpdateRequest_FieldNumber_Email,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(UserUpdateRequest_Storage, email),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "passwordHash",
        .number = UserUpdateRequest_FieldNumber_PasswordHash,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(UserUpdateRequest_Storage, passwordHash),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = UserUpdateRequest_FieldNumber_Name,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(UserUpdateRequest_Storage, name),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userDescription",
        .number = UserUpdateRequest_FieldNumber_UserDescription,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(UserUpdateRequest_Storage, userDescription),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[UserUpdateRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(UserUpdateRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - FeedRequest

@implementation FeedRequest

@dynamic hasUserid, userid;
@dynamic hasLoginToken, loginToken;

typedef struct FeedRequest_Storage {
  uint32_t _has_storage_[1];
  uint32_t userid;
  NSString *loginToken;
} FeedRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = FeedRequest_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeUInt32,
        .offset = offsetof(FeedRequest_Storage, userid),
        .defaultValue.valueUInt32 = 0U,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "loginToken",
        .number = FeedRequest_FieldNumber_LoginToken,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(FeedRequest_Storage, loginToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[FeedRequest class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(FeedRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - FeedResponse

@implementation FeedResponse

@dynamic storyArray;

typedef struct FeedResponse_Storage {
  uint32_t _has_storage_[1];
  NSMutableArray *storyArray;
} FeedResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "storyArray",
        .number = FeedResponse_FieldNumber_StoryArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(FeedResponse_Storage, storyArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(FeedResponse_Story),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[FeedResponse class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(FeedResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - FeedResponse_FollowStory

@implementation FeedResponse_FollowStory

@dynamic hasFollowed, followed;
@dynamic hasFollower, follower;
@dynamic hasTimestamp, timestamp;

typedef struct FeedResponse_FollowStory_Storage {
  uint32_t _has_storage_[1];
  UserPreview *followed;
  UserPreview *follower;
  NSString *timestamp;
} FeedResponse_FollowStory_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "followed",
        .number = FeedResponse_FollowStory_FieldNumber_Followed,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeMessage,
        .offset = offsetof(FeedResponse_FollowStory_Storage, followed),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(UserPreview),
        .fieldOptions = NULL,
      },
      {
        .name = "follower",
        .number = FeedResponse_FollowStory_FieldNumber_Follower,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .type = GPBTypeMessage,
        .offset = offsetof(FeedResponse_FollowStory_Storage, follower),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(UserPreview),
        .fieldOptions = NULL,
      },
      {
        .name = "timestamp",
        .number = FeedResponse_FollowStory_FieldNumber_Timestamp,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .type = GPBTypeString,
        .offset = offsetof(FeedResponse_FollowStory_Storage, timestamp),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[FeedResponse_FollowStory class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(FeedResponse_FollowStory_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - FeedResponse_RecordingStory

@implementation FeedResponse_RecordingStory

@dynamic hasRecording, recording;

typedef struct FeedResponse_RecordingStory_Storage {
  uint32_t _has_storage_[1];
  RecordingResponse *recording;
} FeedResponse_RecordingStory_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recording",
        .number = FeedResponse_RecordingStory_FieldNumber_Recording,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .type = GPBTypeMessage,
        .offset = offsetof(FeedResponse_RecordingStory_Storage, recording),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(RecordingResponse),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[FeedResponse_RecordingStory class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(FeedResponse_RecordingStory_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - FeedResponse_Story

@implementation FeedResponse_Story

@dynamic storyOneOfCase;
@dynamic recStory;
@dynamic followStory;

typedef struct FeedResponse_Story_Storage {
  uint32_t _has_storage_[2];
  FeedResponse_RecordingStory *recStory;
  FeedResponse_FollowStory *followStory;
} FeedResponse_Story_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageOneofDescription oneofs[] = {
      {
        .name = "story",
        .index = -1,
      },
    };
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recStory",
        .number = FeedResponse_Story_FieldNumber_RecStory,
        .hasIndex = -1,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(FeedResponse_Story_Storage, recStory),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(FeedResponse_RecordingStory),
        .fieldOptions = NULL,
      },
      {
        .name = "followStory",
        .number = FeedResponse_Story_FieldNumber_FollowStory,
        .hasIndex = -1,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(FeedResponse_Story_Storage, followStory),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(FeedResponse_FollowStory),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[FeedResponse_Story class]
                                              rootClass:[MashserviceRoot class]
                                                   file:MashserviceRoot_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:oneofs
                                             oneofCount:sizeof(oneofs) / sizeof(GPBMessageOneofDescription)
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(FeedResponse_Story_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

void FeedResponse_Story_ClearStoryOneOfCase(FeedResponse_Story *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = descriptor->oneofs_[0];
  GPBMaybeClearOneof(message, oneof, 0);
}

// @@protoc_insertion_point(global_scope)
