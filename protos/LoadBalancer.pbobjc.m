// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/load_balancer.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "protos/LoadBalancer.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - LoadBalancerRoot

@implementation LoadBalancerRoot

@end

#pragma mark - LoadBalancerRoot_FileDescriptor

static GPBFileDescriptor *LoadBalancerRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"Mash"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - ServerAddressResponse

@implementation ServerAddressResponse

@dynamic hasIpAddress, ipAddress;

typedef struct ServerAddressResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *ipAddress;
} ServerAddressResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ipAddress",
        .number = ServerAddressResponse_FieldNumber_IpAddress,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ServerAddressResponse__storage_, ipAddress),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ServerAddressResponse class]
                                     rootClass:[LoadBalancerRoot class]
                                          file:LoadBalancerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ServerAddressResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ServerAddressRequest

@implementation ServerAddressRequest

@dynamic hasUserid, userid;

typedef struct ServerAddressRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userid;
} ServerAddressRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userid",
        .number = ServerAddressRequest_FieldNumber_Userid,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
        .offset = offsetof(ServerAddressRequest__storage_, userid),
        .defaultValue.valueUInt32 = 0U,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ServerAddressRequest class]
                                     rootClass:[LoadBalancerRoot class]
                                          file:LoadBalancerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ServerAddressRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
